name: "更新 Docker 镜像"

on:
  schedule:
    - cron: "0 20 * * *"
  workflow_dispatch:

jobs:
  update-docker-image:
    name: "更新 Docker 镜像"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: "拉取代码"
        uses: actions/checkout@v4

      - name: "安装依赖"
        run: sudo apt-get update && sudo apt-get install -y jq skopeo

      - name: "提取目标镜像名称和标签"
        id: extract-images
        run: |
          awk '
          BEGIN {
            FS = "|";
            in_table = 0;
            header_found = 0;
            name_col = 0;
            tags_col = 0;
          }

          /^### 同步的镜像/ { in_table = 1; next; }

          in_table && /^\| *镜像名称 *\|/ {
            header_found = 1;
            for (i=1; i<=NF; i++) {
              header = $i;
              gsub(/^[ \t]+|[ \t]+$/, "", header);
              if (header == "镜像名称") name_col = i;
              if (header == "镜像标签") tags_col = i;
            }
            next;
          }
          
          in_table && header_found && /^\| *:/ { next; }
          
          in_table && header_found && /^\|/ {
            if (name_col > 0 && tags_col > 0) {
              name = $name_col;
              tags = $tags_col;
              
              gsub(/^[ \t]+|[ \t]+$/, "", name);
              gsub(/^[ \t]+|[ \t]+$/, "", tags);
              
              if (name != "" && tags != "") {
                split(tags, tag_array, ",");
                for (j in tag_array) {
                  current_tag = tag_array[j];
                  gsub(/^[ \t]+|[ \t]+$/, "", current_tag);
                  if (current_tag != "") {
                    print name ":" current_tag;
                  }
                }
              }
            }
          }
          
          /^###/ && in_table && !/同步的镜像/ { in_table = 0; }
          ' README.md > target-image-list.txt

          echo "目标镜像列表:"
          cat target-image-list.txt          

      - name: "登录到 GHCR"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "登录到 CNB"
        uses: docker/login-action@v3
        with:
          registry: docker.cnb.cool
          username: cnb
          password: ${{ secrets.CNB_DOCKER_TOKEN }}

      - name: "登录到 Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: "检查并同步镜像"
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          set -eo pipefail

          while IFS='|' read -r source_image; do
            echo "正在处理镜像：$source_image"
            
            original_source_image="$source_image"
            image_name_without_tag=$(echo "$source_image" | cut -d':' -f1)
            tag=$(echo "$source_image" | cut -s -d':' -f2)
            simple_image_name=$(basename "$image_name_without_tag")

            if [ -n "$tag" ]; then
              simple_image_with_tag="$simple_image_name:$tag"
            else
              simple_image_with_tag="$simple_image_name"
            fi

            target_image_name_tag="ghcr.io/${{ github.actor }}/$simple_image_with_tag"
            
            SOURCE_IMAGE_URI="docker://$original_source_image"
            TARGET_IMAGE_URI="docker://$target_image_name_tag"
            CNB_IMAGE_URI="docker://docker.cnb.cool/${{ github.repository }}/$simple_image_name:$tag"
            DOCKERHUB_IMAGE_URI="docker://${{ github.actor }}/$simple_image_name:$tag"
            LOCAL_IMAGE_URI="dir:/tmp/docker-sync/$simple_image_name:$tag"

            if ! source_manifest=$(skopeo inspect --raw "$SOURCE_IMAGE_URI" 2>/dev/null); then
              echo "错误：执行 'skopeo inspect' 命令失败，跳过 '$SOURCE_IMAGE_URI'！"
              continue
            fi
            
            if [ -z "$source_manifest" ]; then
              echo "错误：获取源镜像元数据失败，跳过 '$SOURCE_IMAGE_URI'！"
              continue
            fi
            
            target_manifest=$(skopeo inspect --raw "$TARGET_IMAGE_URI" 2>/dev/null || echo "")
            
            need_update=false
            if [ -z "$target_manifest" ]; then
              need_update=true
              echo "目标镜像不存在，需要同步！"
            else
              if [ "$source_manifest" != "$target_manifest" ]; then
                need_update=true
                echo "发现元数据不匹配，需要同步！"
              fi
            fi

            if [ "$need_update" = "false" ]; then
              echo "所有架构都匹配，跳过同步！"
              continue
            fi
            
            mkdir -p /tmp/docker-sync

            if skopeo copy --all "$SOURCE_IMAGE_URI" "$LOCAL_IMAGE_URI"; then
              echo "本地同步 $original_source_image 成功！"
              
              if skopeo copy --all "$LOCAL_IMAGE_URI" "$TARGET_IMAGE_URI"; then
                echo "GHCR 同步 $original_source_image 成功！"
              else
                echo "GHCR 同步 $original_source_image 失败！"
              fi
              
              if skopeo copy --all "$LOCAL_IMAGE_URI" "$CNB_IMAGE_URI"; then
                echo "CNB 同步 $original_source_image 成功！"
              else
                echo "CNB 同步 $original_source_image 失败！"
              fi
              
              if skopeo copy --all "$LOCAL_IMAGE_URI" "$DOCKERHUB_IMAGE_URI"; then
                echo "Docker Hub 同步 $original_source_image 成功！"
              else
                echo "Docker Hub 同步 $original_source_image 失败！"
              fi
              
              rm -rf "/tmp/docker-sync/$simple_image_name:$tag"
            else
              echo "本地同步 $original_source_image 失败！"
              continue
            fi

            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git pull --rebase

            today=$(TZ=Asia/Shanghai date +"%Y-%m-%d")
            full_image_name=$(echo "$original_source_image" | sed 's/:.*//')

            awk -F'|' -v img_name="$full_image_name" -v date="$today" '
              BEGIN { OFS=FS; in_table=0 }
              /### 同步的镜像/ { in_table=1 }
              in_table && /^### / && !/### 同步的镜像/ { in_table=0 }
              in_table && /\|/ {
                trimmed_col = $2;
                gsub(/^[[:space:]]+|[[:space:]]+$/, "", trimmed_col);
                if (trimmed_col == img_name) {
                  $5 = " " date " ";
                }
              }
              { print }
            ' README.md > README.tmp && mv README.tmp README.md

            git add README.md
            if ! git diff --staged --quiet; then
              timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              git commit -m "docs: 更新 $simple_image_name 镜像的同步记录"
              git push
            else
              echo "README.md 无变化，跳过提交！"
            fi

          done < target-image-list.txt
